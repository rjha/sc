

set username and email
----------------------

git config --global user.name "rjha"
git config --global user.email  "jha.rajeev@gmail.com"

get a file from another branch
--------------------------------------------
$git checkout <branchname> <path>
should do it. You need to commit to merge the changes.


working with stash
----------------------
+ save your work 
    - $git stash
+ save stash with a name
    - git stash save work_in_progress

+ see what all stash you have 
    - git stash list
+ To see content of a stash
    - git stash show -p stash@{0}
    - gitk stash@{0}

+ To apply a particular stash 
    -  git stash apply stash@{0}
+ To remove the last stash (w/o applying)
    - git stash drop
+ To remove and apply last stash
    - git stash pop

+ To remove all stashes
    - git stash clear


Undo git add before commit
--------------------------------
I accidently added one file to commit list. 
$git rm --cached <file_to_remove>



Rollback last commit
----------------------
first make sure you are on repo HEAD
    + git fetch origin 
    + git pull origin ml3

Then revert the HEAD

    + git revert HEAD
    + git push origin ml3


amend last commit message
-------------------------
do not do this if you have already pushed to others.
git commit --amend -m "new_message"

To unstage a commit
git reset HEAD


revert a bad pull
----------------------

$git pull origin master
whoops? want to revert? 

$git reflog show 

will show the changes in HEAD. Then you can just reset to wherever you want, like,
$git reset HEAD@{1} 
if there are modified files due to pull
$git checkout .
$git status



revert a bad merge
----------------------
rjha@crunchbang12:~/code/github/sc$ git reset --hard HEAD^
HEAD is now at ef58743 removed visit website button




get a file from another branch
--------------------------------------------
$git checkout <branchname> <path>
should do it. You need to commit to merge the changes.


Merge selective files/folder from another branch
-------------------------------------------------

e.g. merge deploy/mysql folder from master branch into ml3 branch

when in ml3 branch
$git checkout master deploy/mysql

And then commit the changes


list all remote branches
--------------------------
$git fetch origin 
$git branch -a
lists all branches, local as well as remote

or you can do a 
$git ls-remote


Branch Basics
--------------
http://git-scm.com/book/en/Git-Branching-Remote-Branches
+ create a local branch
git branch xyz
git checkout xyz

Tracking branch
---------------
To create a local branch for origin/xyz_world  branch (pushed by someone else)

 $git checkout -b myxyz origin/xyz_world
 Now myxyz points to origin/xyz_world branch

 How to push from local myxyz -> origin/xyz_world branch
 This is a tracking branch so any push from myxyz -> goes to origin/xyz_world 

+ To see your local branches
git branch (the one you are working on will be starred)

+ To delete a local branch
git branch -d xyz

+ How to merge local branch changes into local master?
 switch to local master branch
 git checkout master
 Do a merge
 git merge xyz

+ How to push your branch to origin server?
    git push origin xyz
    
when you local branch name is different from origin branch name 
(e.g. say for local tracking branches)
    git push origin xyz:xyzworld
    

How do my collaborators get it?
 git fetch origin
 git merge origin/xyzworld

 (This will merge in the default working branch - so beware!)

Delete local branch
 - git branch -d myxyz

Delete remote branch
git push origin :xyzworld


How to see changes between two branches?
$git diff --name-status master..<branch>
This shows all the files that are different in two branches
To see actual changes just use $git diff branch1..branch2
To see number of changed lines
git diff  --stat --color master..image-extractor

#see diff of a file between two branches
    git diff master:web/qa/external/image.php ml2:web/qa/external/image.php 


remove stale remote branch reference from local index?
------------------------------------------------------

$git branch -r shows remote branches
$git branch shows my local branches
$git branch -a shows both



First thing to try is fetch with -p
$git fetch -p
This should remove all local branches that do not exist on origin.
verify by issuing $git branch -a

Pruning unwanted(stale) branches
* Do not use prune unnecessarily*  

Use $git remote show origin to see what branches are stale
Then prune using
$git remote prune -n origin (for dry run)
$git remote prune origin (actual thing)
verify by issuing $git branch -a


+ To delete a remote tracking branch
 $git branch -rd origin/test-x
 

show logs after a certain date
----------------------------
git log --after=2012-05-07 --pretty=oneline > logs 


